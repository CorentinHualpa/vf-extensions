// === Script MultiSelect Am√©lior√© - Meilleurs contrastes et boutons style FileUpload ===
function generateMultiSelectPayload(report_langue, options = {}) {
  const translations = {
    fr: {
      globalAllSelect: "Tout s√©lectionner",
      globalAllDeselect: "Tout d√©s√©lectionner",
      submitButton: "‚úÖ Valider ma s√©lection",
      chatDisabled: "üö´ Veuillez faire vos s√©lections d'abord"
    },
    en: {
      globalAllSelect: "Select all",
      globalAllDeselect: "Deselect all", 
      submitButton: "‚úÖ Validate my selection",
      chatDisabled: "üö´ Please make your selections first"
    }
  };
  
  const t = translations[report_langue] || translations.fr;
  
  const payload = {
    // Configuration de base
    multiselect: options.multiselect !== undefined ? options.multiselect : true,
    chat: options.chat !== undefined ? options.chat : false,
    chatDisabledText: options.chatDisabledText || t.chatDisabled,
    
    // ‚úÖ NOUVELLES COULEURS - Meilleurs contrastes
    global_button_color: options.global_button_color || '#2E7D32', // Vert plus fonc√© pour meilleur contraste
    
    // Configuration avanc√©e
    totalMaxSelect: options.totalMaxSelect || 0,
    gridColumns: options.gridColumns || 0,
    optionsGap: options.optionsGap || 8, // Plus d'espacement
    buttonFontSize: options.buttonFontSize || 15,
    
    // Bouton global-all
    useGlobalAll: options.useGlobalAll || false,
    globalAllSelectText: options.globalAllSelectText || t.globalAllSelect,
    globalAllDeselectText: options.globalAllDeselectText || t.globalAllDeselect,
    
    // Texte bouton personnalis√©
    global_select_button_text: options.global_select_button_text || t.submitButton,
    
    // Sections et boutons (√† d√©finir selon les besoins)
    sections: options.sections || [],
    buttons: options.buttons || [
      { 
        text: t.submitButton, 
        path: "Default",
        minSelect: options.minSelect || 1,
        color: "#2E7D32" // ‚úÖ Vert fonc√© pour meilleur contraste
      }
    ],
    
    // ID d'instance
    instanceId: options.instanceId || null
  };
  
  return JSON.stringify(payload);
}

// === Exemple d'utilisation avec sections et meilleures couleurs ===
function generateChapterSelectionPayload(report_langue) {
  const translations = {
    fr: {
      title: "S√©lectionnez les chapitres √† inclure",
      submit: "‚úÖ G√©n√©rer le rapport avec ces chapitres",
      skip: "‚ñ∂Ô∏è Utiliser tous les chapitres par d√©faut",
      previous: "‚óÄÔ∏è Retour √† l'√©tape pr√©c√©dente"
    },
    en: {
      title: "Select chapters to include", 
      submit: "‚úÖ Generate report with these chapters",
      skip: "‚ñ∂Ô∏è Use all chapters by default",
      previous: "‚óÄÔ∏è Back to previous step"
    }
  };
  
  const t = translations[report_langue] || translations.fr;
  
  const sections = [
    {
      label: t.title,
      backgroundColor: '#1976D2', // ‚úÖ Bleu plus fonc√©
      options: [
        { name: "üìä R√©sum√© Ex√©cutif", action: "executive_summary" },
        { name: "üìà Analyse Financi√®re", action: "financial_analysis" },
        { name: "üè¢ Analyse Strat√©gique", action: "strategic_analysis" },
        { name: "‚ö†Ô∏è Analyse des Risques", action: "risk_analysis" },
        { name: "üîÆ Recommandations", action: "recommendations" },
        { name: "üìã Annexes", action: "appendices" }
      ]
    }
  ];
  
  const buttons = [
    { 
      text: t.submit, 
      path: "generate_report",
      minSelect: 1,
      color: "#2E7D32" // ‚úÖ Vert fonc√©
    },
    { 
      text: t.skip, 
      path: "use_all_chapters",
      minSelect: 0,
      color: "#1976D2" // ‚úÖ Bleu fonc√©  
    },
    { 
      text: t.previous, 
      path: "previous_step",
      minSelect: 0,
      color: "#D32F2F" // ‚úÖ Rouge fonc√©
    }
  ];
  
  return generateMultiSelectPayload(report_langue, {
    multiselect: true,
    chat: false,
    sections: sections,
    buttons: buttons,
    useGlobalAll: true,
    gridColumns: 1,
    totalMaxSelect: 0, // Pas de limite
    global_button_color: '#2E7D32'
  });
}

// === Script final pour Voiceflow ===
// Utilisation simple :
dynamicPayload = generateChapterSelectionPayload(report_langue);

// Ou utilisation custom :
// dynamicPayload = generateMultiSelectPayload(report_langue, {
//   sections: [...],
//   buttons: [...],
//   global_button_color: '#1976D2',  // Couleur plus fonc√©e
//   useGlobalAll: true
// });
